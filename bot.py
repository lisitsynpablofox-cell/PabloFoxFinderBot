
import os
import telebot

# ================== CONFIG ==================
TOKEN = os.environ.get("BOT_TOKEN")  # Set on Render (Environment Variables)
DEFAULT_LANG = os.environ.get("DEFAULT_LANG", "ru")
# ============================================

if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Define it as an environment variable.")

bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

TEXTS = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *PabloFoxFinderBot* ‚Äî —Ç–≤–æ–π —à–æ—Ä—Ç–∫–∞—Ç –∫ –ª—É—á—à–∏–º –æ—Ñ—Ñ–µ—Ä–∞–º.\n–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
        "menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "find": "–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: *iphone 15 case*):",
        "categories": "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "tracking_saved": "–ü—Ä–∏–Ω—è–ª! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, –ø–æ–∑–∂–µ –ø—Ä–∏—à–ª—é, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è (–¥–µ–º–æ).",
        "help": "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –º–µ–Ω—é\n/find ‚Äî –ø–æ–∏—Å–∫\n/categories ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n/track ‚Äî —Ç—Ä–µ–∫ —Ü–µ–Ω—ã\n/help ‚Äî –ø–æ–º–æ—â—å\n/lang ‚Äî —è–∑—ã–∫",
        "lang": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_set": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "please_query": "–û—Ç–ø—Ä–∞–≤—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.",
        "unknown": "–ü–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üôÇ",
        "btn_search": "üîé –ü–æ–∏—Å–∫",
        "btn_categories": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "btn_track": "üìâ –¢—Ä–µ–∫ —Ü–µ–Ω—ã",
        "btn_lang": "üåê –Ø–∑—ã–∫ / Language",
        "btn_help": "‚ùì –ü–æ–º–æ—â—å",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    },
    "en": {
        "start": "üëã Hey! I‚Äôm *PabloFoxFinderBot* ‚Äî your shortcut to top deals.\nChoose what to do next:",
        "menu": "Main menu:",
        "find": "Type what to search (e.g., *iphone 15 case*):",
        "categories": "Pick a category:",
        "tracking_saved": "Got it! I‚Äôll track it and ping you if the price drops (demo).",
        "help": "Commands:\n/start ‚Äî menu\n/find ‚Äî search\n/categories ‚Äî categories\n/track ‚Äî price track\n/help ‚Äî help\n/lang ‚Äî language",
        "lang": "Choose language:",
        "lang_set": "Language set to: English üá¨üáß",
        "please_query": "Send a text query.",
        "unknown": "I don‚Äôt get it yet. Use the menu üôÇ",
        "btn_search": "üîé Search",
        "btn_categories": "üìÇ Categories",
        "btn_track": "üìâ Price track",
        "btn_lang": "üåê Language",
        "btn_help": "‚ùì Help",
        "back": "‚¨ÖÔ∏è Back",
    },
}

CATEGORIES = [
    ("Electronics ‚ö°Ô∏è", "electronics"),
    ("Phones & Accessories üì±", "smartphone"),
    ("Computer & Office üíª", "laptop"),
    ("Home & Garden üè°", "home decor"),
    ("Beauty & Health üíÑ", "cosmetics"),
]

from urllib.parse import quote_plus
from telebot import types

user_langs = {}
awaiting_query = set()
awaiting_track = set()

def get_lang(chat_id): return user_langs.get(chat_id, DEFAULT_LANG)
def set_lang(chat_id, lang): user_langs[chat_id] = lang
def t(chat_id, key): return TEXTS[get_lang(chat_id)][key]

def main_menu_kb(chat_id):
    lang = get_lang(chat_id)
    m = types.InlineKeyboardMarkup()
    m.row(
        types.InlineKeyboardButton(TEXTS[lang]["btn_search"], callback_data="menu_find"),
        types.InlineKeyboardButton(TEXTS[lang]["btn_categories"], callback_data="menu_categories")
    )
    m.row(types.InlineKeyboardButton(TEXTS[lang]["btn_track"], callback_data="menu_track"))
    m.row(
        types.InlineKeyboardButton(TEXTS[lang]["btn_lang"], callback_data="menu_lang"),
        types.InlineKeyboardButton(TEXTS[lang]["btn_help"], callback_data="menu_help"),
    )
    return m

def categories_kb(chat_id):
    lang = get_lang(chat_id)
    m = types.InlineKeyboardMarkup()
    for name, code in CATEGORIES:
        m.row(types.InlineKeyboardButton(name, callback_data=f"cat::{code}"))
    m.row(types.InlineKeyboardButton(TEXTS[lang]["back"], callback_data="menu_back"))
    return m

def lang_kb(chat_id):
    m = types.InlineKeyboardMarkup()
    m.row(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang::ru"))
    m.row(types.InlineKeyboardButton("English üá¨üáß", callback_data="lang::en"))
    m.row(types.InlineKeyboardButton(TEXTS[get_lang(chat_id)]["back"], callback_data="menu_back"))
    return m

def build_affiliate_link(query: str) -> str:
    base = "https://aliexpress.com/wholesale?SearchText="
    # TODO: –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ (AliExpress PID/SUBID)
    tracking = "&aff_fcid=DEMO&aff_fsk=DEMO&aff_platform=portals-tool&sk=DEMO"
    return base + quote_plus(query) + tracking

bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, t(chat_id, "start"), reply_markup=main_menu_kb(chat_id))

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.send_message(message.chat.id, t(message.chat.id, "help"), reply_markup=main_menu_kb(message.chat.id))

@bot.message_handler(commands=['find'])
def cmd_find(message):
    chat_id = message.chat.id
    awaiting_query.add(chat_id)
    bot.send_message(chat_id, t(chat_id, "find"))

@bot.message_handler(commands=['categories'])
def cmd_categories(message):
    bot.send_message(message.chat.id, t(message.chat.id, "categories"), reply_markup=categories_kb(message.chat.id))

@bot.message_handler(commands=['track'])
def cmd_track(message):
    chat_id = message.chat.id
    awaiting_track.add(chat_id)
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–∫–∞—Ç—å:" if get_lang(chat_id)=="ru"
                     else "Send a link or query to track:")

@bot.message_handler(commands=['lang'])
def cmd_lang(message):
    bot.send_message(message.chat.id, t(message.chat.id, "lang"), reply_markup=lang_kb(message.chat.id))

@bot.callback_query_handler(func=lambda c: True)
def on_callback(call):
    data = call.data or ""
    chat_id = call.message.chat.id

    if data == "menu_find":
        awaiting_query.add(chat_id)
        bot.send_message(chat_id, t(chat_id, "find"))
    elif data == "menu_categories":
        bot.send_message(chat_id, t(chat_id, "categories"), reply_markup=categories_kb(chat_id))
    elif data == "menu_track":
        awaiting_track.add(chat_id)
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–∫–∞—Ç—å:" if get_lang(chat_id)=="ru"
                         else "Send a link or query to track:")
    elif data == "menu_help":
        bot.send_message(chat_id, t(chat_id, "help"))
    elif data == "menu_lang":
        bot.send_message(chat_id, t(chat_id, "lang"), reply_markup=lang_kb(chat_id))
    elif data == "menu_back":
        bot.send_message(chat_id, t(chat_id, "menu"), reply_markup=main_menu_kb(chat_id))
    elif data.startswith("cat::"):
        q = data.split("::",1)[1]
        link = build_affiliate_link(q)
        bot.send_message(chat_id, f"üîó {link}\n\n(–¥–µ–º–æ-—Å—Å—ã–ª–∫–∞; –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π ID)")
    elif data.startswith("lang::"):
        lang = data.split("::",1)[1]
        set_lang(chat_id, lang)
        bot.send_message(chat_id, t(chat_id, "lang_set"), reply_markup=main_menu_kb(chat_id))

    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

@bot.message_handler(func=lambda m: True, content_types=['text'])
def on_text(message):
    chat_id = message.chat.id
    text = (message.text or "").strip()

    if chat_id in awaiting_query:
        awaiting_query.discard(chat_id)
        link = build_affiliate_link(text)
        bot.send_message(chat_id, f"–í–æ—Ç —á—Ç–æ –Ω–∞—à—ë–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{text}¬ª:\n\nüîó {link}\n\n(–¥–µ–º–æ; –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–æ—Ç–æ)")
        return

    if chat_id in awaiting_track:
        awaiting_track.discard(chat_id)
        bot.send_message(chat_id, t(chat_id, "tracking_saved"))
        return

    bot.send_message(chat_id, t(chat_id, "unknown"), reply_markup=main_menu_kb(chat_id))

if __name__ == "__main__":
    print("Bot started.")
    bot.infinity_polling(skip_pending=True)
